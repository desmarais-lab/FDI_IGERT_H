library(car)
library(clusterSEs)
library(vioplot)
# Load in data
rep_data <- read.dta("/Users/johnpschoeneman/Documents/school/Penn State/Methods/503 - Multivariate Analysis I/503 Replication Project/503_rep.dta")
rep_data1 <-subset(rep_data, lag8incid==1 | lag8incid==0)
rep_data2 <-subset(rep_data, onset==1 | onset==0)
#Model 1
m1 <- glm(onset~OilDisc+loggdp+gdpINT+lagpcoilprod+laglogpop+laglogdurable+ethfrac+
relfrac +lmtnest+lagxpolity+lag1incid+lag2incid+lag3incid+lag4incid+lag5incid
,
data=rep_data1, family="binomial")
summary(m1)
m2 <- glm(onset~OilDisc+loggdp+gdpINT+lagpcoilprod+laglogpop+laglogdurable+
as.factor(year)+ as.factor(ccode)+
lagxpolity+lag1incid+lag2incid+lag3incid+lag4incid+lag5incid
,
data=rep_data1, family="binomial")
summary(m2)
# subset data for above and below $1200
poor <- subset(rep_data1, loggdp<7.1)
rich <- subset(rep_data1, loggdp>=7.1)
poor1 <- poor[-277,]
# MODEL THREE
# if lag8~=. & loggdp<7.1, cluster(ccode) robust
m3 <- glm(onset~OilDisc+loggdp+lagpcoilprod+laglogpop+laglogdurable+ethfrac+
relfrac +lmtnest+lagxpolity+lag1incid+lag2incid+lag3incid+lag4incid+lag5incid
,
data=poor, family="binomial")
summary(m3)
# Model 4
m4 <- glm(onset~OilDisc+loggdp+lagpcoilprod+laglogpop+laglogdurable+ethfrac+
relfrac +lmtnest+lagxpolity+lag1incid+lag2incid+lag3incid+lag4incid+lag5incid
,
data=rich, family="binomial")
summary(m4)
?influencePlot
par(mfrow=c(2,2), mar= c(4,4,4,2.1))
# outlier Analysis
influencePlot(m1)
influencePlot(m3)
influencePlot(m4)
influencePlot(m1, main="Model 1")
#=============================================================#
# John Schoeneman
# Work Done For: PL SC 503
# Date: 4/28/2016
# Work Done: HW9
# Machine: MacPro OSX Yosemite
#=============================================================#
# clear workspace
rm(list=ls())
set.seed(19)
# load needed libraries
library(stargazer)
library(foreign)
library(RCurl)
library(plyr)
library(car)
library(clusterSEs)
library(vioplot)
# Load in data
rep_data <- read.dta("/Users/johnpschoeneman/Documents/school/Penn State/Methods/503 - Multivariate Analysis I/503 Replication Project/503_rep.dta")
rep_data1 <-subset(rep_data, lag8incid==1 | lag8incid==0)
rep_data2 <-subset(rep_data, onset==1 | onset==0)
#Model 1
m1 <- glm(onset~OilDisc+loggdp+gdpINT+lagpcoilprod+laglogpop+laglogdurable+ethfrac+
relfrac +lmtnest+lagxpolity+lag1incid+lag2incid+lag3incid+lag4incid+lag5incid
,
data=rep_data1, family="binomial")
summary(m1)
m2 <- glm(onset~OilDisc+loggdp+gdpINT+lagpcoilprod+laglogpop+laglogdurable+
as.factor(year)+ as.factor(ccode)+
lagxpolity+lag1incid+lag2incid+lag3incid+lag4incid+lag5incid
,
data=rep_data1, family="binomial")
summary(m2)
# subset data for above and below $1200
poor <- subset(rep_data1, loggdp<7.1)
rich <- subset(rep_data1, loggdp>=7.1)
poor1 <- poor[-277,]
# MODEL THREE
# if lag8~=. & loggdp<7.1, cluster(ccode) robust
m3 <- glm(onset~OilDisc+loggdp+lagpcoilprod+laglogpop+laglogdurable+ethfrac+
relfrac +lmtnest+lagxpolity+lag1incid+lag2incid+lag3incid+lag4incid+lag5incid
,
data=poor, family="binomial")
summary(m3)
# Model 4
m4 <- glm(onset~OilDisc+loggdp+lagpcoilprod+laglogpop+laglogdurable+ethfrac+
relfrac +lmtnest+lagxpolity+lag1incid+lag2incid+lag3incid+lag4incid+lag5incid
,
data=rich, family="binomial")
summary(m4)
par(mfrow=c(2,2), mar= c(4,4,4,2.1))
# outlier Analysis
influencePlot(m1, main="Model 1")
influencePlot(m3, main="Model 3")
influencePlot(m4, main="Model 4")
#=============================================================#
# John Schoeneman
# Work Done For: Summer Research
# Date: 5/2016
# Work Done: Optimization Practice
# Machine: MacPro OSX Yosemite
#=============================================================#
# clear workspace
rm(list=ls())
set.seed(19)
rep_data <- read.csv("/Users/johnpschoeneman/Desktop/Summer 2016 Research Proposal/ged40-csv/ged40.csv")
View(rep_data)
View(rep_data)
rep_sub <- subset(rep_data, year=2000)
rep_sub <- subset(rep_data, year==2000)
View(rep_sub)
Y<-c(0,0,0,0,0,1,1,1,1,1)
X<-c(0,1,0,1,0,1,1,1,1,1) # No obs. where Y=1 and X=0
logL <- function(param) {
b0<-param[1]
b1<-param[2]
ll<-Y*log(exp(b0+b1*X)/(1+exp(b0+b1*X))) +
(1-Y)*log(1-(exp(b0+b1*X)/(1+exp(b0+b1*X)))) # lnL for binary logit
ll
} # Logit regression function
Bhat<-maxLik(logL,start=c(0,0))
summary(Bhat)
library(maxLik)
Bhat<-maxLik(logL,start=c(0,0))
summary(Bhat)
load("~/Desktop/Summer 2016 Research Proposal/Negotiation Data/Kaplow_data/NegotCalc_Replication.RData")
View(dat_orig)
unique(dat_orig$year)
unique(dat_orig$year, dat_orig$ccode)
unique(dat_orig$year, dat_orig$ccode)
View(data.dta)
View(data.dta)
# clear workspace
rm(list=ls())
set.seed(19)
# load needed libraries
library(stargazer)
library(foreign)
library(RCurl)
library(plyr)
library(car)
library(gvlma)
# Load in data
hw7_url <- getURL("https://raw.githubusercontent.com/PrisonRodeo/PLSC503-Spring-2016-git/master/Exercises/PLSC503-2016-ExerciseSeven.csv")
hw7_data <- read.csv(text = hw7_url)
rm(hw7_url)
# base OLS
linear.1 <- lm(cases~trade+tradebal+central, data=hw7_data)
summary(linear.1)
data transformation
par(mfrow=c(1,1), mar= c(4,4,4,2.1))
plot(hw7_data$trade, hw7_data$cases) # positive and linear
plot(hw7_data$tradebal, hw7_data$cases)  # positive?
boxplot(hw7_data$cases~hw7_data$central) # stark difference
#check for outliers
influencePlot(linear.1) #3: 85, 128, 130
gvlma(x=linear.1) # not good
library(lattice)
grid<-expand.grid(trade=seq(0,100,1),
tradebal=seq(-8,15,1), central=seq(0,1,1))
hats<-predict(linear.2,newdata=grid)
levelplot(hats~grid$trade*grid$tradebal,
contour=TRUE,
cuts=12,pretty=TRUE,xlab="Total Trade",
ylab="Trade Balance",
col.regions=heat.colors)
# interactions
linear.2 <- lm(cases~trade*tradebal+trade*central, data=hw7_data)
summary(linear.2)
library(lattice)
grid<-expand.grid(trade=seq(0,100,1),
tradebal=seq(-8,15,1), central=seq(0,1,1))
hats<-predict(linear.2,newdata=grid)
levelplot(hats~grid$trade*grid$tradebal,
contour=TRUE,
cuts=12,pretty=TRUE,xlab="Total Trade",
ylab="Trade Balance",
col.regions=heat.colors)
trellis.par.set("axis.line",list(col="transparent"))
theseCol=heat.colors(150)
wireframe(hats~grid$trade*grid$tradebal,
drape=TRUE,
xlab=list("Total Trade",rot=30),
ylab=list("Trade Balance",
rot=-40),zlab=list("Predictions",rot=90),
col.regions=theseCol,scales=list(arrows=FALSE,col="black"),
zoom=0.85,pretty=TRUE)
a <- linearHypothesis(linear.2,"trade+trade:tradebal")
b <- linearHypothesis(linear.2,"trade+trade:central")
# clear workspace
rm(list=ls())
set.seed(19)
# load needed libraries
library(gpcm)
install.packages("gpcm")
install.packages("ltm")
library(gpcm)
?rnorm
a <- rnorm(10, 1.5, .3)
b <- rnorm(10, 0 , 1)
d <- matrix(rnorm(40), 10, 4)
View(d)
is.na(d[1:2, 2:4]) <-TRUE
View(d)
is.na(d[3:4, 3:4]) <-TRUE
is.na(d[5:6, 4]) <-TRUE
View(d)
?rgpcm
??rgpcm
parms <- list(est=date.frae(cbind(a,b,d)))
parms <- list(est=date.frame(cbind(a,b,d)))
parms <- list(est=data.frame(cbind(a,b,d)))
class(parms) <- "gpcm"
plot(parms)
plot.gpcm(parms)
gpcm(parms)
library(ltm)
plot.gpcm(parms)
plot(parms)
est=data.frame(cbind(a,b,d))
class(est) <- "gpcm"
plot(parms)
plot(parms,plot.type="irf")
?rgpcm
??rgpcm
plot.gpcm(parms)
plot(d)
?plot.gpcm
plot.gpcm(parms, plot=TRUE)
plot(mtcars)
plot(mtcars)
126*125
#=============================================================#
# John Schoeneman
# Work Done For: FDI Network Analysis RA-IGERT
# Date: Spring 2017
# Work Done: Descriptive Statistics
# Machine: MacPro OSX Yosemite
#=============================================================#
# clear workspace
rm(list=ls())
set.seed(19)
# libraries
library(doBy)
library(foreach)
library(doMC)
library(stargazer)
library(RCurl)
library(plyr)
library(car)
library(MASS)
library(igraph)
#no_cores <- detectCores()
#registerDoMC(no_cores)  #change the 2 to your number of CPU cores
setwd("/Users/johnpschoeneman/Documents/school/Penn State/RA:TA/FDI_IGERT_H/Code")
#load in data
fdi <- read.csv("fdi_sub.csv", stringsAsFactors=FALSE)        #FDI
fdi <- fdi[,-1]
fdi$trade_int_sq = fdi$trade_int^2
fdi$dyad <- paste(fdi$Destination, fdi$Origin, sep = "")
#Create GDP pc by origin
fdi$Origin.GDPpc <- fdi$Origin.GDP/fdi$Origin.pop
gdppc <- summaryBy(Origin.GDPpc ~ Origin + Year, data=fdi)
#create GDP pc by Destination
fdi <- merge(fdi, gdppc, by.x = c("Destination", "Year"), by.y = c("Origin", "Year"), all.x =TRUE)
colnames(fdi)[36] <- "Dest.GDPpc"
rm(gdppc)
fdi <- fdi[,c(1,3,2,4:36)]
#log FDI
fdi$ln_Value <- log(fdi$Value+1)
# rho as reciprocity
rho <- function(g){
g2 <- g
diag(g2) <- NA
g_mean <- mean(g2, na.rm=T)
num <- sum((g-g_mean)*t(g-g_mean))
denom <- sum((g-g_mean)^2)
stat <- num/denom
stat
}
i =5
fdi_yr <- subset(fdi, fdi$Year ==i +2000)
# create graph object
fdi_graph <- graph.data.frame(fdi_yr, directed=TRUE, vertices=NULL)
fdi_y <- get.adjacency(fdi_graph, attr='ln_Value', names=TRUE, sparse=FALSE)
rho(fdi_y)
descriptive_stats <- matrix(nrow=12, ncol=6)
for(i in 1:12){
descriptive_stats[i,1] <- i +2000
#extract one year
fdi_yr <- subset(fdi, fdi$Year ==i +2000)
# create graph object
fdi_graph <- graph.data.frame(fdi_yr, directed=TRUE, vertices=NULL)
fdi_y <- get.adjacency(fdi_graph, attr='ln_Value', names=TRUE, sparse=FALSE)
#measure reciprocity
descriptive_stats[i,2] <- rho(fdi_y)
# Transitivity
fdi_g <- graph.adjacency(fdi_y, mode="directed")
t <- transitivity(fdi_g, type="weighted", vids=NULL,isolates="NaN")
t <- na.omit(t)
descriptive_stats[i,3] <- mean(t)
descriptive_stats[i,4] <- max(t)
descriptive_stats[i,5] <- min(t)
# assortativity by Polity
library(doBy)
agg<-summaryBy(Dest.polity~ Destination, fdi_yr)
# Attach attribute Polity to each vertex
fdi_g<-set_vertex_attr(fdi_g,"Polity",value=agg$Dest.polity.mean)
list.vertex.attributes(fdi_g)
# Calculate the assortativity coefficient for polity
descriptive_stats[i,6] <- assortativity(fdi_g,types1=V(fdi_g)$Polity,directed=T)
}
library(plotly)
data <- data.frame(descriptive_stats)
plot_ly(data, x = ~X1, y = ~X2, type = 'scatter', mode = 'lines') %>%
layout(title = "FDI Network Reciprocity",
xaxis = list(title = "Year"),
yaxis = list (title = "Reciprocity"))
m <- list(
l = 50,
r = 50,
b = 100,
t = 100,
pad = 4
)
plot_ly(data, x = ~X1, y = ~X2, type = 'scatter', mode = 'lines') %>%
layout(title = "FDI Network Reciprocity",
xaxis = list(title = "Year"),
yaxis = list (title = "Reciprocity"),
autosize = F, width = 500, height = 500, margin = m)
plot_ly(data, x = ~X1, y = ~X2, type = 'scatter', mode = 'lines') %>%
layout(title = "FDI Network Reciprocity",
xaxis = list(title = "Year"),
yaxis = list (title = "Reciprocity"),
autosize = F, margin = m)
m <- list(
l = 5,
r = 5,
b = 5,
t = 5,
pad = 4
)
plot_ly(data, x = ~X1, y = ~X2, type = 'scatter', mode = 'lines') %>%
layout(title = "FDI Network Reciprocity",
xaxis = list(title = "Year"),
yaxis = list (title = "Reciprocity"),
autosize = F, margin = m)
m <- list(
l = 5,
r = 5,
b = 5,
t = 5,
pad = 1
)
plot_ly(data, x = ~X1, y = ~X2, type = 'scatter', mode = 'lines') %>%
layout(title = "FDI Network Reciprocity",
xaxis = list(title = "Year"),
yaxis = list (title = "Reciprocity"),
autosize = F, margin = m)
m <- list(
l = 50,
r = 50,
b = 50,
t = 50,
pad = 1
)
plot_ly(data, x = ~X1, y = ~X2, type = 'scatter', mode = 'lines') %>%
layout(title = "FDI Network Reciprocity",
xaxis = list(title = "Year"),
yaxis = list (title = "Reciprocity"),
autosize = F, margin = m)
m <- list(
l = 100,
r = 100,
b = 50,
t = 50,
pad = 1
)
data <- data.frame(descriptive_stats)
plot_ly(data, x = ~X1, y = ~X2, type = 'scatter', mode = 'lines') %>%
layout(title = "FDI Network Reciprocity",
xaxis = list(title = "Year"),
yaxis = list (title = "Reciprocity"),
autosize = F, margin = m)
m <- list(
l = 100,
r = 100,
b = 50,
t = 50,
pad = 1
)
data <- data.frame(descriptive_stats)
plot_ly(data, x = ~X1, y = ~X2, type = 'scatter', mode = 'lines') %>%
layout(title = "FDI Network Reciprocity",
xaxis = list(title = "Year"),
yaxis = list (title = "Reciprocity"),
autosize = T, margin = m)
plot_ly(data, x = ~X1, y = ~X2, type = 'scatter', mode = 'lines') %>%
layout(title = "FDI Network Reciprocity",
xaxis = list(title = "Year"),
yaxis = list (title = "Reciprocity"))
plot_ly(data, x = ~X1, y = ~X2, type = 'scatter', mode = 'lines') %>%
layout(title = "FDI Network Reciprocity",
xaxis = list(title = "Year"),
yaxis = list (title = "Reciprocity"),
margin = m)
m <- list(
l = 50,
r = 50,
b = 50,
t = 50,
pad = 1
)
plot_ly(data, x = ~X1, y = ~X2, type = 'scatter', mode = 'lines') %>%
layout(title = "FDI Network Reciprocity",
xaxis = list(title = "Year"),
yaxis = list (title = "Reciprocity"),
margin = m)
plot_ly(data, x = ~X1, y = ~X3, type = 'scatter', mode = 'lines') %>%
layout(title = "FDI Network Transitivity",
xaxis = list(title = "Year"),
yaxis = list (title = "Transitivity"))
plot_ly(data, x = ~X1, y = ~X6, type = 'scatter', mode = 'lines') %>%
layout(title = "Assortativity for Polity",
xaxis = list(title = "Year"),
yaxis = list (title = "Assortativity"))
plot_ly(data, x = ~X1, y = ~X3, type = 'scatter', mode = 'lines') %>%
layout(title = "FDI Network Transitivity",
xaxis = list(title = "Year"),
yaxis = list (title = "Transitivity"),
margin = m)
plot_ly(data, x = ~X1, y = ~X6, type = 'scatter', mode = 'lines') %>%
layout(title = "Assortativity for Polity",
xaxis = list(title = "Year"),
yaxis = list (title = "Assortativity"),
margin = m)
plot_ly(data, x = ~X1, y = ~X2, type = 'scatter', mode = 'lines') %>%
layout(title = "FDI Network Reciprocity",
xaxis = list(title = "Year"),
yaxis = list (title = "Reciprocity"),
margin = m)
plot_ly(data, x = ~X1, y = ~X3, type = 'scatter', mode = 'lines') %>%
layout(title = "FDI Network Transitivity",
xaxis = list(title = "Year"),
yaxis = list (title = "Transitivity"),
margin = m)
plot_ly(data, x = ~X1, y = ~X6, type = 'scatter', mode = 'lines') %>%
layout(title = "Assortativity for Polity",
xaxis = list(title = "Year"),
yaxis = list (title = "Assortativity"),
margin = m)
plot(fdi_y)
plot_graph(fdi_y)
plot.igraph(fdi_y)
plot.igraph(fdi_g)
edge.attributes(fdi_g)
vertex.attributes(fdi_g)
plot.igraph(fdi_g,vertex.label=V(net)$name,layout=layout.fruchterman.reingold,
edge.color="black",edge.width=E(net)$ln_Value)
plot.igraph(fdi_g,vertex.label=V(net)$name,layout=layout.fruchterman.reingold,
edge.color="black",edge.width=E(fdi_g)$ln_Value)
plot.igraph(fdi_g,vertex.label=V(fdi_g)$name,layout=layout.fruchterman.reingold,
edge.color="black",edge.width=E(fdi_g)$ln_Value)
library(GERGM)
plot_network(fdi_y)
?plot_network
?plot.igraph
plot.igraph(fdi_g,vertex.label=V(fdi_g)$name,layout=layout.fruchterman.reingold,
edge.color="blue",edge.width=E(fdi_g)$ln_Value, vertex.size=5)
plot.igraph(fdi_g,vertex.label=V(fdi_g)$name,layout=layout.fruchterman.reingold,
edge.color="blue",edge.width=E(fdi_g)$ln_Value, vertex.size=5, vertex.label.cex=2)
plot.igraph(fdi_g,vertex.label=V(fdi_g)$name,layout=layout.fruchterman.reingold,
edge.color="blue",edge.width=E(fdi_g)$ln_Value, vertex.size=5, vertex.label.cex=.5)
plot.igraph(fdi_g,vertex.label=V(fdi_g)$name,layout=layout.fruchterman.reingold,
edge.color="black",edge.width=E(fdi_g)$ln_Value, edge.arrow.size=.5,
vertex.size=5, vertex.label.cex=.6)
plot.igraph(fdi_g,vertex.label=V(fdi_g)$name,layout=layout.fruchterman.reingold,
edge.color="blue",edge.width=E(fdi_g)$ln_Value, edge.arrow.size=.5,
vertex.size=5, vertex.label.cex=.6, vertex.label.color="yellow")
plot.igraph(fdi_g,vertex.label=V(fdi_g)$name,layout=layout.fruchterman.reingold,
edge.color="blue",edge.width=E(fdi_g)$ln_Value, edge.arrow.size=.5,
vertex.size=5, vertex.label.cex=.6, vertex.label.color="black",
vertex.color="yellow")
plot.igraph(fdi_g,vertex.label=V(fdi_g)$name,layout=layout.fruchterman.reingold,
edge.color="light grey",edge.width=E(fdi_g)$ln_Value, edge.arrow.size=.5,
vertex.size=5, vertex.label.cex=.6, vertex.label.color="black",
vertex.color="yellow")
plot.igraph(fdi_g,vertex.label=V(fdi_g)$name,layout=layout.fruchterman.reingold,
edge.color="light grey",edge.width=E(fdi_g)$ln_Value, edge.arrow.size=.2,
vertex.size=3, vertex.label.cex=.4, vertex.label.color="black",
vertex.color="yellow")
plot.igraph(fdi_g,vertex.label=V(fdi_g)$name,layout=layout.fruchterman.reingold,
edge.color="light grey",edge.width=(E(fdi_g)$ln_Value)/10, edge.arrow.size=.2,
vertex.size=3, vertex.label.cex=.4, vertex.label.color="black",
vertex.color="yellow")
plot.igraph(fdi_g,vertex.label=V(fdi_g)$name,layout=layout.fruchterman.reingold,
edge.color="light grey",edge.width=(E(fdi_g)$ln_Value)/100, edge.arrow.size=.2,
vertex.size=3, vertex.label.cex=.4, vertex.label.color="black",
vertex.color="yellow")
plot.igraph(fdi_g,vertex.label=V(fdi_g)$name,layout=layout.fruchterman.reingold,
edge.color=(E(fdi_g)$ln_Value),edge.width=(E(fdi_g)$ln_Value)/100, edge.arrow.size=.2,
vertex.size=3, vertex.label.cex=.4, vertex.label.color="black",
vertex.color="yellow")
# plot network
plot.igraph(fdi_g,vertex.label=V(fdi_g)$name,layout=layout.fruchterman.reingold,
edge.color="light grey",edge.width=((E(fdi_g)$ln_Value)/100), edge.arrow.size=.2,
vertex.size=3, vertex.label.cex=.4, vertex.label.color="black",
vertex.color="yellow")
