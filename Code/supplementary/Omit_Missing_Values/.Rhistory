rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#libraries
library(latentnet)
library(igraph)
library(CIDnetworks)
library(Bergm)
library(ergm)
library(igraphdata)
library(intergraph)
#load data
data(florentine)
data(karate)
zach <- asNetwork(karate)
data('sampson')
rm(karate)
#load functions
source("DIC_functions.R")
# Set Model Parameters
burnin = 500
sample_size = 2000
interval = 5
#create dataframe to store values
results <- as.data.frame(matrix(nrow=3, ncol=3))
row.names(results) <- c("LSM", "SBM", "ERGM")
colnames(results) <- c("florentine", "zach", "samplike")
#pull out adjacency matrix for SBMs
flo_adj <- as.matrix.network(flomarriage,matrix.type="adjacency")
zach_adj <- as.matrix.network(zach,matrix.type="adjacency")
samplike_adj <- as.matrix.network(samplike,matrix.type="adjacency")
######### Florentine data ############
#LSM
flo_LSM <- ergmm(flomarriage ~ edges + kstar(2),
control=ergmm.control(burnin=burnin,
sample.size= sample_size,
interval=interval))
results$florentine[1] <-LSM_DIC(flo_LSM)
#SBM
flo_SBM<- CID.Gibbs(flo_adj, components = c(SBM(2)), draws = sample_size, burnin = burnin,
thin = interval)
results$florentine[2] <-flo_SBM$DIC[1]
#ERGM
flo_ERGM <- bergm(flomarriage ~ edges + kstar(2),
burn.in = burnin,
aux.iters = sample_size,
main.iters = sample_size,
gamma = 1)
flo_lls <- ll.bergm(flo_ERGM$Theta,flomarriage ~ offset(edges) + offset(kstar(2)),
MCMC.samplesize=sample_size,nsteps=10)
results$florentine[3] <-dic.bergm(flo_lls)
######### zach data  ############
#LSM
zach_LSM <- ergmm(zach ~ edges + kstar(2),
control=ergmm.control(burnin=burnin,
sample.size= sample_size,
interval=interval))
results$zach[1] <-LSM_DIC(zach_LSM)
#SBM
zach_SBM<- CID.Gibbs(flo_adj, components = c(SBM(2)), draws = sample_size, burnin = burnin,
thin = interval)
results$zach[2] <-zach_SBM$DIC[1]
#ERGM
zach_ERGM <- bergm(zach ~ edges + kstar(2),
burn.in = burnin,
aux.iters = sample_size,
main.iters = sample_size,
gamma = 1)
zach_lls <- ll.bergm(zach_ERGM$Theta,zach ~ offset(edges) + offset(kstar(2)),
MCMC.samplesize=sample_size,nsteps=10)
results$zach[3] <-dic.bergm(zach_lls)
######### Sampson data ############
#LSM
samplike_LSM <- ergmm(samplike~edges+gwesp(decay=.5, fixed=FALSE),
control=ergmm.control(burnin=burnin,
sample.size= sample_size,
interval=interval))
results$samplike[1] <-LSM_DIC(samplike_LSM)
#SBM
samplike_SBM<- CID.Gibbs(samplike_adj, components = c(SBM(2)), draws = sample_size, burnin = burnin,
thin = interval)
results$samplike[2] <-samplike_SBM$DIC[1]
#ERGM
samplike_ERGM <- bergm(samplike~edges+gwesp(decay=.5, fixed=FALSE),
burn.in = burnin,
aux.iters = sample_size,
main.iters = sample_size,
gamma = 1)
samplike_lls <- ll.bergm(samplike_ERGM$Theta,samplike ~ offset(edges) + offset(kstar(2)),
MCMC.samplesize=sample_size,nsteps=10)
results$samplike[3] <-dic.bergm(samplike_lls)
save(results, file="comparison.Rdata")
View(results)
View(results)
samplike_lls <- ll.bergm(samplike_ERGM$Theta,samplike ~ offset(edges) + offset(gwesp(decay=.5, fixed=FALSE)),
MCMC.samplesize=sample_size,nsteps=10)
samplike_ERGM$Theta
samplike_lls <- ll.bergm(samplike_ERGM$Theta,samplike ~ offset(edges) + offset(gwesp(decay=.5, fixed=FALSE)),
MCMC.samplesize=sample_size,nsteps=10)
samplike_lls <- ll.bergm(samplike_ERGM$Theta,samplike ~ offset(edges) + offset(gwesp(decay=.5, fixed=FALSE)),
MCMC.samplesize=sample_size,nsteps=10)
summary(samplike_ERGM)
summaary(zaxh_ERGM)
summaary(zach_ERGM)
summary(zach_ERGM)
bergm.output(zach_ERGM)
bergm.output(samplike_ERGM)
samplike_LSM <- ergmm(samplike~edges + mutual,
control=ergmm.control(burnin=burnin,
sample.size= sample_size,
interval=interval))
results$samplike[1] <-LSM_DIC(samplike_LSM)
samplike_ERGM <- bergm(samplike~edges+mutual,
burn.in = burnin,
aux.iters = sample_size,
main.iters = sample_size,
gamma = 1)
samplike_lls <- ll.bergm(samplike_ERGM$Theta,samplike ~ offset(edges) + offset(mutual),
MCMC.samplesize=100,nsteps=10)
View(results)
results$samplike[3] <-dic.bergm(samplike_lls)
save(results, file="comparison.Rdata")
View(results)
install.packages("car")
install.packages(c("assertthat", "backports", "Bergm", "BH", "broom", "cli", "clipr", "coda", "colorspace", "data.table", "digest", "doBy", "doParallel", "dplyr", "ergm", "ergm.count", "evaluate", "expm", "ggplot2", "glue", "gtable", "highr", "igraph", "iterators", "jsonlite", "knitr", "latentnet", "lazyeval", "lmtest", "lpSolve", "markdown", "maxLik", "mcmc", "MCMCpack", "mime", "msm", "network", "networkDynamic", "numDeriv", "openxlsx", "pillar", "pkgconfig", "plm", "psych", "purrr", "quantreg", "R6", "Rcpp", "rlang", "rmarkdown", "robustbase", "rstudioapi", "scales", "snow", "stringi", "stringr", "tergm", "tibble", "tidyr", "tidyselect", "tinytex", "yaml", "zip", "zoo"))
install.packages("Zelig")
install.packages("car")
version
install.packages("gtools")
which R
# clear workspace
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
### Read in data
load("haven_cov.Rdata")
load("haven_net.Rdata")
#Node list: "polity","trade_opennes",gdp.pc", "OECD_mem"
#Edge list:  1:9 = c(lag, mass, dist, alliance, defense, trade_vol, bit, both_oecd, pta_depth)
# network models
ergm_network <- expression(ergm(net ~ sum+ sum(1/2) +nonzero+#mutual+
edgecovmutual(oecd_both)+ edgecovmutual(not_oecd_both)+
transitiveweights("min", "max", "min")+
nodeicov("polity")+nodeocov("polity")+
nodeicov("trade_opennes")+nodeocov("trade_opennes")+
nodeicov("gdp.pc")+nodeocov("gdp.pc")+
nodematch("OECD_mem")+
edgecov(edgecovars[[1]])+edgecov(edgecovars[[2]])+
edgecov(edgecovars[[3]])+edgecov(edgecovars[[4]])+
edgecov(edgecovars[[5]])+edgecov(edgecovars[[6]])+
edgecov(edgecovars[[7]])+edgecov(edgecovars[[9]]),
response="tValue",
reference=~Poisson,
control=control.ergm(MCMLE.trustregion=100,
MCMLE.maxit=100,
MCMC.samplesize=10000,
MCMC.burnin=500,
MCMC.interval=1000)))
list_of_networks=netlist
list_of_edgecovs=covlist
seed=1234
ncores=11
require(ergm)
require(ergm.count)
require(doParallel)
require(foreach)
## Doing individual ergm estimation
registerDoParallel(cores=ncores)
ergms <- foreach(i=1:length(list_of_networks)) %dopar% {
net <- list_of_networks[[i]]
if(length(list_of_networks)==length(list_of_edgecovs)){
edgecovars <- list_of_edgecovs[[i]]
}
set.seed(seed)
oecd_both <- edgecovars[["OECD_both"]]
not_oecd_both <- 1-oecd_both
edge_vals <- net %e% "Value"
net %e% "tValue" <- ceiling(log(edge_vals)*2)
edge_vals2 <- net %e% "tValue"
eval(ergm_network)
}
stopImplicitCluster()
print("finished network models")
save.image("haven_results_RR.RData")
# clear workspace
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
### Read in data
load("tax_cov.Rdata")
load("tax_net.Rdata")
netlist[[1]]
for(i in 1:8){
netlist[[i]]
}
for(i in 1:8){
print(summary(netlist[[i]]))
}
for(i in 1:8){
print(netlist[[i]])
}
# clear workspace, set seed, and set wd
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
for(q in c(25,50)){
### Read in data
load(paste0("q",q,"_cov.Rdata"))
load(paste0("q",q,"_net.Rdata"))
#Node list: "polity","trade_opennes",gdp.pc", "OECD_mem"
#Edge list:  1:9 = c(lag, mass, dist, alliance, defense, trade_vol, bit, both_oecd, pta_depth)
# network models
ergm_network <- expression(ergm(net ~ sum+ sum(1/2) +nonzero+#mutual+
edgecovmutual(oecd_both)+ edgecovmutual(not_oecd_both)+
transitiveweights("min", "max", "min")+
nodeicov("polity")+nodeocov("polity")+
nodeicov("trade_opennes")+nodeocov("trade_opennes")+
nodeicov("gdp.pc")+nodeocov("gdp.pc")+
nodematch("OECD_mem")+
edgecov(edgecovars[[1]])+edgecov(edgecovars[[2]])+
edgecov(edgecovars[[3]])+edgecov(edgecovars[[4]])+
edgecov(edgecovars[[5]])+edgecov(edgecovars[[6]])+
edgecov(edgecovars[[7]])+edgecov(edgecovars[[9]]),
response="tValue",
reference=~Poisson,
control=control.ergm(MCMLE.trustregion=100,
MCMLE.maxit=100,
MCMC.samplesize=10000,
MCMC.burnin=500,
MCMC.interval=1000)))
list_of_networks=netlist
list_of_edgecovs=covlist
seed=1234
ncores=11
require(ergm)
require(ergm.count)
require(doParallel)
require(foreach)
## Doing individual ergm estimation
registerDoParallel(cores=ncores)
ergms <- foreach(i=1:length(list_of_networks)) %dopar% {
net <- list_of_networks[[i]]
if(length(list_of_networks)==length(list_of_edgecovs)){
edgecovars <- list_of_edgecovs[[i]]
}
set.seed(seed)
oecd_both <- edgecovars[["OECD_both"]]
not_oecd_both <- 1-oecd_both
edge_vals <- net %e% "Value"
net %e% "tValue" <- ceiling(log(edge_vals)*2)
edge_vals2 <- net %e% "tValue"
eval(ergm_network)
}
stopImplicitCluster()
print("finished network models")
save.image(paste0("q",q, "_results_RR.RData"))
}
