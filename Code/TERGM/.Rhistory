fdi$trade_ln <- log(fdi$trade_int+fdi$trade_hco+fdi$trade_cap+fdi$trade_mix+1)
fdi$dyad <- paste(fdi$Destination, fdi$Origin, sep = "")
fdi$mass <- (log(fdi$Dest.GDP*fdi$Origin.GDP))
fdi$dist_ln <- log(fdi$dist)
fdi$Value_ln <- round(log(ifelse(fdi$Value<0, 0, fdi$Value)+1))
fdi$Dest.pop_ln <- log(fdi$Dest.pop)
fdi$Origin.pop_ln <- log(fdi$Origin.pop)
#lag DV and GDP (to create growth rates)
fdi <- slide(fdi, Var = "Dest.GDP", GroupVar = "dyad", slideBy = -1)
fdi <- slide(fdi, Var = "Origin.GDP", GroupVar = "dyad", slideBy = -1)
fdi <- slide(fdi, Var = "Value_ln", GroupVar = "dyad", slideBy = -1)
#Create GDP pc (logged) and growth rate
fdi$Origin.GDPpc_ln <- log(fdi$Origin.GDP/fdi$Origin.pop)
fdi$Dest.GDPpc_ln <- log(fdi$Dest.GDP/fdi$Dest.pop)
fdi$Dest.GDPpc <- fdi$Dest.GDP/fdi$Dest.pop
fdi$Origin.GDPg <- (fdi$Origin.GDP-fdi$`Origin.GDP-1`)/fdi$`Origin.GDP-1`
fdi$Dest.GDPg <- (fdi$Dest.GDP-fdi$`Dest.GDP-1`)/fdi$`Dest.GDP-1`
# create alliance dummy
fdi$alliance <- (fdi$nonaggression.max.x + fdi$entente.max.x + fdi$neutrality.max.x)
fdi$alliance <- as.numeric(ifelse(fdi$alliance >0, 1, 0))
#make bit  and defense numeric
fdi$bit_dummy <- as.numeric(fdi$bit_dummy)
fdi$defense.max.x <- as.numeric(fdi$defense.max.x)
#drop 2001 with missing variables
fdi <- na.omit(fdi)
# clear workspace
rm(list=ls())
set.seed(19)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#load packages
library(magic)
library(network)
library(igraph)
library(doBy)
library(plyr)
library(DataCombine)
#load in data
fdi <- read.csv("sub_stock.csv", stringsAsFactors=FALSE)        #FDI
fdi <- fdi[,-1]
# create new variable transformations
fdi$trade_ln <- log(fdi$trade_int+fdi$trade_hco+fdi$trade_cap+fdi$trade_mix+1)
fdi$dyad <- paste(fdi$Destination, fdi$Origin, sep = "")
fdi$mass <- (log(fdi$Dest.GDP*fdi$Origin.GDP))
fdi$dist_ln <- log(fdi$dist)
fdi$Value_ln <- round(log(ifelse(fdi$Value<0, 0, fdi$Value)+1))
fdi$Dest.pop_ln <- log(fdi$Dest.pop)
fdi$Origin.pop_ln <- log(fdi$Origin.pop)
#lag DV and GDP (to create growth rates)
fdi <- slide(fdi, Var = "Dest.GDP", GroupVar = "dyad", slideBy = -1)
fdi <- slide(fdi, Var = "Origin.GDP", GroupVar = "dyad", slideBy = -1)
fdi <- slide(fdi, Var = "Value_ln", GroupVar = "dyad", slideBy = -1)
#Create GDP pc (logged) and growth rate
fdi$Origin.GDPpc_ln <- log(fdi$Origin.GDP/fdi$Origin.pop)
fdi$Dest.GDPpc_ln <- log(fdi$Dest.GDP/fdi$Dest.pop)
fdi$Dest.GDPpc <- fdi$Dest.GDP/fdi$Dest.pop
fdi$Origin.GDPg <- (fdi$Origin.GDP-fdi$`Origin.GDP-1`)/fdi$`Origin.GDP-1`
fdi$Dest.GDPg <- (fdi$Dest.GDP-fdi$`Dest.GDP-1`)/fdi$`Dest.GDP-1`
# create alliance dummy
fdi$alliance <- (fdi$nonaggression.max.x + fdi$entente.max.x + fdi$neutrality.max.x)
fdi$alliance <- as.numeric(ifelse(fdi$alliance >0, 1, 0))
#make bit  and defense numeric
fdi$bit_dummy <- as.numeric(fdi$bit_dummy)
fdi$defense.max.x <- as.numeric(fdi$defense.max.x)
#drop 2001 with missing variables
fdi <- na.omit(fdi)
write.csv(fdi, file = "sub_stock.csv")
#=============================================================#
# John Schoeneman
# Work Done For: FDI Network Analysis RA-IGERT
# Date: Fall 2016
# Work Done: Perform ERGM Count analysis
# Machine: MacPro OSX Yosemite
#=============================================================#
# clear workspace
rm(list=ls())
set.seed(19)
# libraries
library(ergm.count)
library(network)
library(igraph)
library(doBy)
library(plyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#load in data
fdi <- read.csv("sub_stock.csv", stringsAsFactors=FALSE)        #FDI
fdi <- fdi[,-1]
#extract one year
fdi02 <- subset(fdi, fdi$Year ==2002)
#=============================================================#
# John Schoeneman
# Work Done For: FDI Network Analysis RA-IGERT
# Date: Fall 2016
# Work Done: Perform ERGM Count analysis
# Machine: MacPro OSX Yosemite
#=============================================================#
# clear workspace
rm(list=ls())
set.seed(19)
# libraries
library(ergm.count)
library(network)
library(igraph)
library(doBy)
library(plyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#load in data
fdi <- read.csv("sub_stock.csv", stringsAsFactors=FALSE)        #FDI
fdi <- fdi[,-1]
#extract one year
fdi02 <- subset(fdi, fdi$Year ==2002)
#create vertex dataset
vertex_attr <- summaryBy(Origin.GDP+Origin.polity+Origin.TO+Origin.pop_ln +Origin.GDPg+
Origin.GDPpc_ln+Origin.pv ~ Origin, data=fdi02)
#vertex attr: "Origin.GDP","Origin.polity","Origin.TO", "Origin.pop",  "Origin.GDP.g",ã€€Origin.pv"
#rename vertex dataset
names(vertex) <- c("name","GDP", "Polity", "TradeOpen", "Pop", "GDP.g","GDPpc", "PV")
#create network object
detach("package:igraph", unload=TRUE)
fdi_net <- network(fdi02, matrix.type="edgelist", directed=TRUE)
#set edge attributes
set.edge.attribute(fdi_net, attrname="Value_ln", value=fdi02$Value_ln)
set.edge.attribute(fdi_net, attrname="lag_stock", value=fdi02$Value_ln.1)
set.edge.attribute(fdi_net, attrname="mass", value=fdi02$mass)
set.edge.attribute(fdi_net, attrname="distance", value=fdi02$dist)
set.edge.attribute(fdi_net, attrname="bit_dummy", value=fdi02$bit_dummy)
set.edge.attribute(fdi_net, attrname="defence_t", value=fdi02$defense.max.x)
set.edge.attribute(fdi_net, attrname="alliance", value=fdi02$alliance)
set.edge.attribute(fdi_net, attrname="trade_ln", value=fdi02$trade_ln)
#set vertex attributes
set.vertex.attribute(fdi_net, attrname="Polity", value=vertex_attr$Polity)
set.vertex.attribute(fdi_net, attrname="TradeOpen", value=vertex_attr$TradeOpen)
set.vertex.attribute(fdi_net, attrname="GDPpc", value=vertex_attr$GDPpc)
set.vertex.attribute(fdi_net, attrname="Pop", value=vertex_attr$Pop)
#check network
fdi_net
list.edge.attributes(fdi_net)
row.names(vertex_attr) <- vertex_attr[,1]
View(vertex_attr)
names(vertex_attr) <- c("name","GDP", "Polity", "TradeOpen", "Pop", "GDP.g","GDPpc", "PV")
#set vertex attributes
set.vertex.attribute(fdi_net, attrname="Polity", value=vertex_attr$Polity)
set.vertex.attribute(fdi_net, attrname="TradeOpen", value=vertex_attr$TradeOpen)
set.vertex.attribute(fdi_net, attrname="GDPpc", value=vertex_attr$GDPpc)
set.vertex.attribute(fdi_net, attrname="Pop", value=vertex_attr$Pop)
#check network
fdi_net
list.edge.attributes(fdi_net)
row.names(vertex_attr) <- vertex_attr[,1]
#=============================================================#
# John Schoeneman
# Work Done For: FDI Network Analysis RA-IGERT
# Date: Fall 2016
# Work Done: Perform ERGM Count analysis
# Machine: MacPro OSX Yosemite
#=============================================================#
# clear workspace
rm(list=ls())
set.seed(19)
# libraries
library(ergm.count)
library(network)
#library(igraph)
library(doBy)
library(plyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#load in data
fdi <- read.csv("sub_stock.csv", stringsAsFactors=FALSE)        #FDI
fdi <- fdi[,-1]
#extract one year
fdi02 <- subset(fdi, fdi$Year ==2002)
#create vertex dataset
vertex_attr <- summaryBy(Origin.GDP+Origin.polity+Origin.TO+Origin.pop_ln +Origin.GDPg+
Origin.GDPpc_ln+Origin.pv ~ Origin, data=fdi02)
#vertex attr: "Origin.GDP","Origin.polity","Origin.TO", "Origin.pop",  "Origin.GDP.g",ã€€Origin.pv"
#rename vertex dataset
names(vertex_attr) <- c("name","GDP", "Polity", "TradeOpen", "Pop", "GDP.g","GDPpc", "PV")
#create network object
#detach("package:igraph", unload=TRUE)
fdi_net <- network(fdi02, matrix.type="edgelist", directed=TRUE)
#set edge attributes
set.edge.attribute(fdi_net, attrname="Value_ln", value=fdi02$Value_ln)
set.edge.attribute(fdi_net, attrname="lag_stock", value=fdi02$Value_ln.1)
set.edge.attribute(fdi_net, attrname="mass", value=fdi02$mass)
set.edge.attribute(fdi_net, attrname="distance", value=fdi02$dist)
set.edge.attribute(fdi_net, attrname="bit_dummy", value=fdi02$bit_dummy)
set.edge.attribute(fdi_net, attrname="defence_t", value=fdi02$defense.max.x)
set.edge.attribute(fdi_net, attrname="alliance", value=fdi02$alliance)
set.edge.attribute(fdi_net, attrname="trade_ln", value=fdi02$trade_ln)
#set vertex attributes
set.vertex.attribute(fdi_net, attrname="Polity", value=vertex_attr$Polity)
set.vertex.attribute(fdi_net, attrname="TradeOpen", value=vertex_attr$TradeOpen)
set.vertex.attribute(fdi_net, attrname="GDPpc", value=vertex_attr$GDPpc)
set.vertex.attribute(fdi_net, attrname="Pop", value=vertex_attr$Pop)
#check network
fdi_net
list.edge.attributes(fdi_net)
row.names(vertex_attr) <- vertex_attr[,1]
?install.packages
adist("giitf", "j")
adist("giitf", "jiitf")
a <_adist("giitf", "jiitf")
a <- adist("giitf", "jiitf")
a
View(a)
a <- adist("giitf", "jiitf")[1,1]
a
fdi_net[[1]]
fdi_net
list.edge.attributes(fdi_net)
View(fdi02)
#base formula for only network measures
formula <- fdi_net ~ sum + sum(pow=1/2)+ nonzero +
edgecov(fdi_net, "lag_stock", form="sum")+
edgecov(fdi_net, "mass", form="sum")+
edgecov(fdi_net, "distance", form="sum")+
edgecov(fdi_net, "bit_dummy", form="sum")+
edgecov(fdi_net, "alliance", form="sum")+
edgecov(fdi_net, "defence_t", form="sum")+
edgecov(fdi_net, "trade_ln", form="sum")+
nodeocov("Polity", form="sum")+
nodeocov("TradeOpen", form="sum")+
nodeocov("GDPpc", form="sum")+
nodeocov("Pop", form="sum")+
nodeicov("Polity", form="sum")+
nodeicov("TradeOpen", form="sum")+
nodeicov("GDPpc", form="sum")+
nodeicov("Pop", form="sum")
formula <- fdi_net ~ sum + sum(pow=1/2)+ nonzero #
# count model
fit.01.1 <- ergm(formula,
#estimate='MLE',
response="Value_ln",
reference=~Poisson,
#verbose=TRUE,
control=control.ergm(MCMLE.trustregion=100,
MCMLE.maxit=50,
MCMC.samplesize=1000,
MCMC.burnin=500,
MCMC.interval=1000
#,MCMC.prop.weights="0inflated"
#,MCMC.prop.args=list(p0=0.75)
))
formula <- fdi_net ~ sum + sum(pow=1/2)+ nonzero +
edgecov(fdi_net, "lag_stock", form="sum")+
edgecov(fdi_net, "mass", form="sum")+
edgecov(fdi_net, "distance", form="sum")+
edgecov(fdi_net, "bit_dummy", form="sum")+
edgecov(fdi_net, "alliance", form="sum")+
edgecov(fdi_net, "defence_t", form="sum")+
edgecov(fdi_net, "trade_ln", form="sum")#+
#nodeocov("Polity", form="sum")+
#nodeocov("TradeOpen", form="sum")+
#nodeocov("GDPpc", form="sum")+
#nodeocov("Pop", form="sum")+
#nodeicov("Polity", form="sum")+
#nodeicov("TradeOpen", form="sum")+
#nodeicov("GDPpc", form="sum")+
#nodeicov("Pop", form="sum")
# count model
fit.01.1 <- ergm(formula,
#estimate='MLE',
response="Value_ln",
reference=~Poisson,
#verbose=TRUE,
control=control.ergm(MCMLE.trustregion=100,
MCMLE.maxit=50,
MCMC.samplesize=1000,
MCMC.burnin=500,
MCMC.interval=1000
#,MCMC.prop.weights="0inflated"
#,MCMC.prop.args=list(p0=0.75)
))
formula <- fdi_net ~ sum + sum(pow=1/2)+ nonzero +
edgecov(fdi_net, "lag_stock", form="sum")+
edgecov(fdi_net, "mass", form="sum")+
edgecov(fdi_net, "distance", form="sum")+
edgecov(fdi_net, "bit_dummy", form="sum")+
edgecov(fdi_net, "alliance", form="sum")+
edgecov(fdi_net, "defence_t", form="sum")+
edgecov(fdi_net, "trade_ln", form="sum")#+
nodeocov("Polity", form="sum")+
#nodeocov("TradeOpen", form="sum")+
#nodeocov("GDPpc", form="sum")+
#nodeocov("Pop", form="sum")+
nodeicov("Polity", form="sum")+
#nodeicov("TradeOpen", form="sum")+
#nodeicov("GDPpc", form="sum")+
#nodeicov("Pop", form="sum")
# count model
fit.01.1 <- ergm(formula,
#estimate='MLE',
response="Value_ln",
reference=~Poisson,
#verbose=TRUE,
control=control.ergm(MCMLE.trustregion=100,
MCMLE.maxit=50,
MCMC.samplesize=1000,
MCMC.burnin=500,
MCMC.interval=1000
#,MCMC.prop.weights="0inflated"
#,MCMC.prop.args=list(p0=0.75)
))
#base formula for only network measures
formula <- fdi_net ~ sum + sum(pow=1/2)+ nonzero +
edgecov(fdi_net, "lag_stock", form="sum")+
edgecov(fdi_net, "mass", form="sum")+
edgecov(fdi_net, "distance", form="sum")+
edgecov(fdi_net, "bit_dummy", form="sum")+
edgecov(fdi_net, "alliance", form="sum")+
edgecov(fdi_net, "defence_t", form="sum")+
edgecov(fdi_net, "trade_ln", form="sum")#+
nodeocov("Polity", form="sum")+
nodeocov("TradeOpen", form="sum")+
#nodeocov("GDPpc", form="sum")+
#nodeocov("Pop", form="sum")+
nodeicov("Polity", form="sum")+
nodeicov("TradeOpen", form="sum")+
#nodeicov("GDPpc", form="sum")+
#nodeicov("Pop", form="sum")
# count model
fit.01.1 <- ergm(formula,
#estimate='MLE',
response="Value_ln",
reference=~Poisson,
#verbose=TRUE,
control=control.ergm(MCMLE.trustregion=100,
MCMLE.maxit=50,
MCMC.samplesize=1000,
MCMC.burnin=500,
MCMC.interval=1000
#,MCMC.prop.weights="0inflated"
#,MCMC.prop.args=list(p0=0.75)
))
formula <- fdi_net ~ sum + sum(pow=1/2)+ nonzero +
edgecov(fdi_net, "lag_stock", form="sum")+
edgecov(fdi_net, "mass", form="sum")+
edgecov(fdi_net, "distance", form="sum")+
edgecov(fdi_net, "bit_dummy", form="sum")+
edgecov(fdi_net, "alliance", form="sum")+
edgecov(fdi_net, "defence_t", form="sum")+
edgecov(fdi_net, "trade_ln", form="sum")+
nodeocov("Polity", form="sum")+
nodeocov("TradeOpen", form="sum")+
#nodeocov("GDPpc", form="sum")+
#nodeocov("Pop", form="sum")+
nodeicov("Polity", form="sum")+
nodeicov("TradeOpen", form="sum")#+
#nodeicov("GDPpc", form="sum")+
#nodeicov("Pop", form="sum")
# count model
fit.01.1 <- ergm(formula,
#estimate='MLE',
response="Value_ln",
reference=~Poisson,
#verbose=TRUE,
control=control.ergm(MCMLE.trustregion=100,
MCMLE.maxit=50,
MCMC.samplesize=1000,
MCMC.burnin=500,
MCMC.interval=1000
#,MCMC.prop.weights="0inflated"
#,MCMC.prop.args=list(p0=0.75)
))
formula <- fdi_net ~ sum + sum(pow=1/2)+ nonzero +
edgecov(fdi_net, "lag_stock", form="sum")+
edgecov(fdi_net, "mass", form="sum")+
edgecov(fdi_net, "distance", form="sum")+
edgecov(fdi_net, "bit_dummy", form="sum")+
edgecov(fdi_net, "alliance", form="sum")+
edgecov(fdi_net, "defence_t", form="sum")+
edgecov(fdi_net, "trade_ln", form="sum")+
nodeocov("Polity", form="sum")+
nodeocov("TradeOpen", form="sum")+
nodeocov("GDPpc", form="sum")+
#nodeocov("Pop", form="sum")+
nodeicov("Polity", form="sum")+
nodeicov("TradeOpen", form="sum")+
nodeicov("GDPpc", form="sum")#+
#nodeicov("Pop", form="sum")
# count model
fit.01.1 <- ergm(formula,
#estimate='MLE',
response="Value_ln",
reference=~Poisson,
#verbose=TRUE,
control=control.ergm(MCMLE.trustregion=100,
MCMLE.maxit=50,
MCMC.samplesize=1000,
MCMC.burnin=500,
MCMC.interval=1000
#,MCMC.prop.weights="0inflated"
#,MCMC.prop.args=list(p0=0.75)
))
formula <- fdi_net ~ sum + sum(pow=1/2)+ nonzero +
edgecov(fdi_net, "lag_stock", form="sum")+
edgecov(fdi_net, "mass", form="sum")+
edgecov(fdi_net, "distance", form="sum")+
edgecov(fdi_net, "bit_dummy", form="sum")+
edgecov(fdi_net, "alliance", form="sum")+
edgecov(fdi_net, "defence_t", form="sum")+
edgecov(fdi_net, "trade_ln", form="sum")+
nodeocov("Polity", form="sum")+
nodeocov("TradeOpen", form="sum")+
nodeocov("GDPpc", form="sum")+
nodeocov("Pop", form="sum")+
nodeicov("Polity", form="sum")+
nodeicov("TradeOpen", form="sum")+
nodeicov("GDPpc", form="sum")+
nodeicov("Pop", form="sum")
# count model
fit.01.1 <- ergm(formula,
#estimate='MLE',
response="Value_ln",
reference=~Poisson,
#verbose=TRUE,
control=control.ergm(MCMLE.trustregion=100,
MCMLE.maxit=50,
MCMC.samplesize=1000,
MCMC.burnin=500,
MCMC.interval=1000
#,MCMC.prop.weights="0inflated"
#,MCMC.prop.args=list(p0=0.75)
))
# clear workspace
rm(list=ls())
set.seed(19)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#load packages
library(magic)
library(network)
library(igraph)
library(doBy)
library(plyr)
library(DataCombine)
#load in data
fdi <- read.csv("sub_stock.csv", stringsAsFactors=FALSE)        #FDI
fdi <- fdi[,-1]
# create new variable transformations
fdi$trade_ln <- log(fdi$trade_int+fdi$trade_hco+fdi$trade_cap+fdi$trade_mix+1)
fdi$dyad <- paste(fdi$Destination, fdi$Origin, sep = "")
fdi$mass <- (log(fdi$Dest.GDP*fdi$Origin.GDP))
fdi$dist_ln <- log(fdi$dist)
fdi$Value_ln <- round(log(ifelse(fdi$Value<0, 0, fdi$Value)+1))
fdi$Dest.pop_ln <- log(fdi$Dest.pop)
fdi$Origin.pop_ln <- log(fdi$Origin.pop)
#lag DV and GDP (to create growth rates)
fdi <- slide(fdi, Var = "Dest.GDP", GroupVar = "dyad", slideBy = -1)
fdi <- slide(fdi, Var = "Origin.GDP", GroupVar = "dyad", slideBy = -1)
fdi <- slide(fdi, Var = "Value_ln", GroupVar = "dyad", slideBy = -1)
#Create GDP pc (logged) and growth rate
fdi$Origin.GDPpc_ln <- log(fdi$Origin.GDP/fdi$Origin.pop)
fdi$Dest.GDPpc_ln <- log(fdi$Dest.GDP/fdi$Dest.pop)
fdi$Dest.GDPpc <- fdi$Dest.GDP/fdi$Dest.pop
fdi$Origin.GDPg <- (fdi$Origin.GDP-fdi$`Origin.GDP-1`)/fdi$`Origin.GDP-1`
fdi$Dest.GDPg <- (fdi$Dest.GDP-fdi$`Dest.GDP-1`)/fdi$`Dest.GDP-1`
# create alliance dummy
fdi$alliance <- (fdi$nonaggression.max.x + fdi$entente.max.x + fdi$neutrality.max.x)
fdi$alliance <- as.numeric(ifelse(fdi$alliance >0, 1, 0))
#make bit  and defense numeric
fdi$bit_dummy <- as.numeric(fdi$bit_dummy)
fdi$defense.max.x <- as.numeric(fdi$defense.max.x)
#drop 2001 with missing variables
fdi <- na.omit(fdi)
# Create an empty list in which to store the networks
netlist <- list()
years <- 2002:2012
for(i in 1:11){
#subset by year
fdi_yr <- subset(fdi, fdi$Year == years[11])
#turn into graph object
fdi_graph <- graph.data.frame(fdi_yr)
#extract adjacency matrix
adj <- get.adjacency(fdi_graph,attr='Value_ln', sparse=FALSE)
full <- as.network(adj)
#loop and add to list
netlist[[i]] <- full
# add all the vertex attributes to the networks
vertex <- summaryBy(Origin.GDP+Origin.polity+Origin.TO+Origin.pop_ln +Origin.GDPg+
Origin.GDPpc_ln+Origin.pv ~ Origin, data=fdi_yr)
names(vertex) <- c("name","GDP", "Polity", "TradeOpen", "Pop", "GDP.g","GDPpc", "PV")
netlist[[i]] %e% "Value_ln" <- adj
netlist[[i]] %v% "polity" <- vertex$Polity
netlist[[i]] %v% "trade_opennes" <- vertex$TradeOpen
netlist[[i]] %v% "pop" <- vertex$Pop
netlist[[i]] %v% "gdp.pc" <- vertex$GDPpc
}
save(netlist, file = "fdi_net.Rdata")
#lag FDI Stock, mass, and distance
covlist <- list()
for(i in 1:11){
#subset by year
fdi_yr <- subset(fdi, fdi$Year == years[i])
#turn into graph object
fdi_graph <- graph.data.frame(fdi_yr)
#extract adjacency matrix
lag <- get.adjacency(fdi_graph,attr='Value_ln-1', sparse=FALSE)
mass <- get.adjacency(fdi_graph,attr='mass', sparse=FALSE)
dist <- get.adjacency(fdi_graph,attr='dist', sparse=FALSE)
alliance <- get.adjacency(fdi_graph,attr='alliance', sparse=FALSE)
defense <- get.adjacency(fdi_graph,attr='defense.max.x', sparse=FALSE)
trade_vol <- get.adjacency(fdi_graph,attr='trade_ln', sparse=FALSE)
bit <- get.adjacency(fdi_graph,attr='bit_dummy', sparse=FALSE)
#put covariates into list
covlist_yr <- list(lag=lag, mass=mass, dist=dist, alliance = alliance,
defense= defense, trade_vol = trade_vol, bit = bit)
#add to main list
covlist[[i]] <- covlist_yr
}
#Clean out unneeded data
rm(dist, fdi, fdi_yr, full, lag, mass, vertex, covlist_yr, fdi_graph, i, vars, years)
#SAVE as Rdata
save(covlist, file = "fdi_cov.Rdata")
