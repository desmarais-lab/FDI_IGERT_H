fdi <- read.csv("sub_stock.csv", stringsAsFactors=FALSE)        #FDI
fdi <- fdi[,-1]
# Important to note that the igraph function below is expecting an edgelist, which means it will record an edge between every pair of vertices if given a dyadic dataset
# plot 2002
fdi02 <- subset(fdi, fdi$Year==2002)
# Create an edgelist and vertex-level dataset
uniqueStates <- sort(unique(fdi02$Origin))
names(uniqueStates)
names(fdi01)
names(fdi02)
#=============================================================#
# John Schoeneman
# Work Done For: FDI Network Analysis RA-IGERT
# Date: Fall 2016
# Work Done: Perform ERGM Count analysis
# Machine: MacPro OSX Yosemite
#=============================================================#
# clear workspace
rm(list=ls())
set.seed(19)
# libraries
library(network)
library(igraph)
#load in data
fdi <- read.csv("sub_stock.csv", stringsAsFactors=FALSE)        #FDI
fdi <- fdi[,-1]
# Important to note that the igraph function below is expecting an edgelist, which means it will record an edge between every pair of vertices if given a dyadic dataset
# plot 2002
fdi02 <- subset(fdi, fdi$Year==2002)
# Create an edgelist and vertex-level dataset
uniqueStates <- sort(unique(fdi02$Origin))
originPolity <- fdi02$Origin.polity[match(uniqueStates,fdi02$Origin)]
vertexData <- data.frame(uniqueStates,originPolity)
# re-arrange sender-receiver
fdi02[,c(1,2)] <- fdi02[,c(2,1)]
fdi02 <- fdi02[-which(fdi02$Value <= 0),]
fdi_net <- graph_from_data_frame(d=fdi02,directed=T,vertices=vertexData)
plot(fdi_net, edge.arrow.size=.01, edge.color="gray",edge.width=fdi_net$Value_ln/50,
vertex.color="orange", vertex.size=3,vertex.label.cex=.5,
vertex.label.color="black")
?igraph.plotting
plot(fdi_net, edge.arrow.size=.01, edge.color="gray",edge.width=fdi_net$Value_ln/50,
vertex.color="orange", vertex.size=3,vertex.label=NA)
vertex.color="orange", vertex.size=3,vertex.label=NA)
fdi_net <- graph_from_data_frame(d=fdi02,directed=T,vertices=vertexData)
plot(fdi_net, edge.arrow.size=.01, edge.color=rgb(.6,.6,.6,.3),edge.width=fdi_net$Value_ln/50,
vertex.color="orange", vertex.size=3,vertex.label=NA)
plot(fdi_net, edge.arrow.size=.01, edge.color=rgb(.6,.6,.6,.1),edge.width=fdi_net$Value_ln/50,
vertex.color="orange", vertex.size=3,vertex.label=NA)
vertex.color="orange", vertex.size=3,vertex.label=NA)
plot(fdi_net, edge.arrow.size=.01, edge.color=rgb(.9,.9,.9,.1),edge.width=fdi_net$Value_ln/50,
plot(fdi_net, edge.arrow.size=.01, edge.color=rgb(.9,.9,.9,.1),edge.width=fdi_net$Value_ln/50, vertex.color="orange", vertex.size=3,vertex.label=NA)
plot(fdi_net, edge.arrow.size=.01, edge.color=rgb(.3,.3,.3,.1),edge.width=fdi_net$Value_ln/50, vertex.color="orange", vertex.size=3,vertex.label=NA)
plot(fdi_net, edge.arrow.size=.01, edge.color=rgb(.2,.2,.2,.1),edge.width=fdi_net$Value_ln/50, vertex.color="orange", vertex.size=3,vertex.label=NA)
?igraph.plotting
?layout
coordinates <- layout_with_fr(fdi_net,weights=fdi_net$Value_ln/50)
plot(fdi_net, edge.arrow.size=.01, edge.color=rgb(.2,.2,.2,.1),edge.width=fdi_net$Value_ln/50, vertex.color="orange", vertex.size=3,vertex.label=NA,layout=coordinates)
plot(fdi_net, edge.arrow.size=.1, edge.color=rgb(.2,.2,.2,.1),edge.width=fdi_net$Value_ln/50, vertex.color="orange", vertex.size=3,vertex.label=NA,layout=coordinates)
plot(fdi_net, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1),edge.width=fdi_net$Value_ln/50, vertex.color="orange", vertex.size=3,vertex.label=NA,layout=coordinates)
# plot 2002
fdi02 <- subset(fdi, fdi$Year==2002)
# Create an edgelist and vertex-level dataset
uniqueStates <- sort(unique(fdi02$Origin))
originPolity <- fdi02$Origin.polity[match(uniqueStates,fdi02$Origin)]
vertexData <- data.frame(uniqueStates,originPolity)
# re-arrange sender-receiver
fdi02[,c(1,2)] <- fdi02[,c(2,1)]
# remove non-edges
fdi02 <- fdi02[-which(fdi02$Value <= 0),]
fdi_net <- graph_from_data_frame(d=fdi02,directed=T,vertices=vertexData)
# function to remove isolates
delete.isolates <- function(graph, mode = 'all') {
require(igraph)
isolates <- which(degree(graph, mode = mode) == 0) - 1
delete.vertices(graph, isolates)
}
fdi_netNoIsolates <- delete.isolates(fdi_net)
coordinates <- layout_with_fr(fdi_netNoIsolates,weights=fdi_net$Value)
plot(fdi_netNoIsolates, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1),edge.width=fdi_netNoIsolates$Value_ln/50, vertex.color="orange", vertex.size=3,vertex.label=NA,layout=coordinates)
# plot 2002
fdi02 <- subset(fdi, fdi$Year==2002)
# Create an edgelist and vertex-level dataset
uniqueStates <- sort(unique(fdi02$Origin))
originPolity <- fdi02$Origin.polity[match(uniqueStates,fdi02$Origin)]
vertexData <- data.frame(uniqueStates,originPolity)
# re-arrange sender-receiver
fdi02[,c(1,2)] <- fdi02[,c(2,1)]
# remove non-edges
fdi02 <- fdi02[-which(fdi02$Value <= 0),]
fdi_net <- graph_from_data_frame(d=fdi02,directed=T,vertices=vertexData)
# function to remove isolates
delete.isolates <- function(graph, mode = 'all') {
require(igraph)
isolates <- which(degree(graph, mode = mode) == 0) - 1
delete.vertices(graph, isolates)
}
fdi_netNoIsolates <- delete.isolates(fdi_net)
coordinates <- layout_with_fr(fdi_netNoIsolates,weights=fdi_net$Value)
plot(fdi_netNoIsolates, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1),edge.width=fdi_netNoIsolates$Value_ln/50, vertex.color="orange", vertex.size=3,vertex.label=NA,layout=coordinates)
# plot 2002
fdi02 <- subset(fdi, fdi$Year==2002)
# Create an edgelist and vertex-level dataset
uniqueStates <- sort(unique(fdi02$Origin))
originPolity <- fdi02$Origin.polity[match(uniqueStates,fdi02$Origin)]
vertexData <- data.frame(uniqueStates,originPolity)
# re-arrange sender-receiver
fdi02[,c(1,2)] <- fdi02[,c(2,1)]
# remove non-edges
fdi02 <- fdi02[-which(fdi02$Value <= 0),]
fdi_net <- graph_from_data_frame(d=fdi02,directed=T,vertices=vertexData)
# function to remove isolates
delete.isolates <- function(graph, mode = 'all') {
require(igraph)
isolates <- which(degree(graph, mode = mode) == 0)
delete.vertices(graph, isolates)
}
fdi_netNoIsolates <- delete.isolates(fdi_net)
coordinates <- layout_with_fr(fdi_netNoIsolates,weights=fdi_net$Value)
plot(fdi_netNoIsolates, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1),edge.width=fdi_netNoIsolates$Value_ln/50, vertex.color="orange", vertex.size=3,vertex.label=NA,layout=coordinates)
# plot 2002
fdi02 <- subset(fdi, fdi$Year==2002)
# Create an edgelist and vertex-level dataset
uniqueStates <- sort(unique(fdi02$Origin))
originPolity <- fdi02$Origin.polity[match(uniqueStates,fdi02$Origin)]
vertexData <- data.frame(uniqueStates,originPolity)
# re-arrange sender-receiver
fdi02[,c(1,2)] <- fdi02[,c(2,1)]
# remove non-edges
fdi02 <- fdi02[-which(fdi02$Value <= 0),]
fdi_net <- graph_from_data_frame(d=fdi02,directed=T,vertices=vertexData)
# function to remove isolates
delete.isolates <- function(graph, mode = 'all') {
require(igraph)
isolates <- which(degree(graph, mode = mode) == 0)
delete.vertices(graph, isolates)
}
fdi_netNoIsolates <- delete.isolates(fdi_net)
coordinates <- layout_with_fr(fdi_netNoIsolates,weights=fdi_net$Value)
plot(fdi_netNoIsolates, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1),edge.width=fdi_netNoIsolates$Value_ln/50, vertex.color="orange", vertex.size=3,vertex.label=NA,layout=coordinates)
plot(fdi_netNoIsolates, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1),edge.width=fdi_netNoIsolates$Value_ln/50, vertex.color="orange", vertex.size=3,vertex.label,vertex.label.cex=.1,layout=coordinates)
plot(fdi_netNoIsolates, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1),edge.width=fdi_netNoIsolates$Value_ln/50, vertex.color="orange", vertex.size=3,vertex.label.cex=.1,layout=coordinates)
plot(fdi_netNoIsolates, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1),edge.width=fdi_netNoIsolates$Value_ln/50, vertex.color="orange", vertex.size=3,layout=coordinates)
plot(fdi_netNoIsolates, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1),edge.width=fdi_netNoIsolates$Value_ln/50, vertex.color="orange", vertex.size=3,vertex.label.cex=1,layout=coordinates)
plot(fdi_netNoIsolates, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1),edge.width=fdi_netNoIsolates$Value_ln/50, vertex.color="orange", vertex.size=3,vertex.label.cex=.5,layout=coordinates)
plot(fdi_netNoIsolates, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1),edge.width=fdi_netNoIsolates$Value_ln/50, vertex.color="orange", vertex.size=3,vertex.label.cex=.3,layout=coordinates)
# plot 2002
fdi02 <- subset(fdi, fdi$Year==2012)
# Create an edgelist and vertex-level dataset
uniqueStates <- sort(unique(fdi02$Origin))
originPolity <- fdi02$Origin.polity[match(uniqueStates,fdi02$Origin)]
vertexData <- data.frame(uniqueStates,originPolity)
# re-arrange sender-receiver
fdi02[,c(1,2)] <- fdi02[,c(2,1)]
# remove non-edges
fdi02 <- fdi02[-which(fdi02$Value <= 0),]
fdi_net <- graph_from_data_frame(d=fdi02,directed=T,vertices=vertexData)
# function to remove isolates
delete.isolates <- function(graph, mode = 'all') {
require(igraph)
isolates <- which(degree(graph, mode = mode) == 0)
delete.vertices(graph, isolates)
}
fdi_netNoIsolates <- delete.isolates(fdi_net)
coordinates <- layout_with_fr(fdi_netNoIsolates,weights=fdi_net$Value)
plot(fdi_netNoIsolates, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1),edge.width=fdi_netNoIsolates$Value_ln/50, vertex.color="orange", vertex.size=3,layout=coordinates)
plot(fdi_netNoIsolates, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1),edge.width=fdi_netNoIsolates$Value_ln/50, vertex.color="orange", vertex.size=3,vertex.label.cex=.3,layout=coordinates)
fdi_netNoIsolates
fdi_netNoIsolates$originPolity
fdi_netNoIsolates$Value_ln/50
vertex.color <- get.vertex.attribute(fdi_netNoIsolates,"originPolity")
vertex.color
?blue2red
library(colorRamps)
?blue2red
colorSequence <- blue2red(length(-10:10))
colorSequence <- blue2red(length(-10:10))
vertex.color <- colorSequence[get.vertex.attribute(fdi_netNoIsolates,"originPolity")+11]
library(colorRamps)
colorSequence <- blue2red(length(-10:10))
vertex.colors <- colorSequence[get.vertex.attribute(fdi_netNoIsolates,"originPolity")+11]
plot(fdi_netNoIsolates, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1), vertex.color=vertex.colors, vertex.size=3,vertex.label=NA,layout=coordinates)
unique(fdi$Year)
years <- unique(fdi$Year)
for(yr in years){
# plot 2002
fdi02 <- subset(fdi, fdi$Year==yr)
# Create an edgelist and vertex-level dataset
uniqueStates <- sort(unique(fdi02$Origin))
originPolity <- fdi02$Origin.polity[match(uniqueStates,fdi02$Origin)]
vertexData <- data.frame(uniqueStates,originPolity)
# re-arrange sender-receiver
fdi02[,c(1,2)] <- fdi02[,c(2,1)]
# remove non-edges
fdi02 <- fdi02[-which(fdi02$Value <= 0),]
fdi_net <- graph_from_data_frame(d=fdi02,directed=T,vertices=vertexData)
# function to remove isolates
delete.isolates <- function(graph, mode = 'all') {
require(igraph)
isolates <- which(degree(graph, mode = mode) == 0)
delete.vertices(graph, isolates)
}
fdi_netNoIsolates <- delete.isolates(fdi_net)
coordinates <- layout_with_fr(fdi_netNoIsolates,weights=fdi_net$Value)
library(colorRamps)
colorSequence <- blue2red(length(-10:10))
vertex.colors <- colorSequence[get.vertex.attribute(fdi_netNoIsolates,"originPolity")+11]
fileName <- paste("./networkPlots/fdiNet",yr,sep="")
pdf(file=fileName,height=4,width=4)
plot(fdi_netNoIsolates, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1), vertex.color=vertex.colors, vertex.size=3,vertex.label=NA,layout=coordinates)
def.off()
}
for(yr in years){
# plot 2002
fdi02 <- subset(fdi, fdi$Year==yr)
# Create an edgelist and vertex-level dataset
uniqueStates <- sort(unique(fdi02$Origin))
originPolity <- fdi02$Origin.polity[match(uniqueStates,fdi02$Origin)]
vertexData <- data.frame(uniqueStates,originPolity)
# re-arrange sender-receiver
fdi02[,c(1,2)] <- fdi02[,c(2,1)]
# remove non-edges
fdi02 <- fdi02[-which(fdi02$Value <= 0),]
fdi_net <- graph_from_data_frame(d=fdi02,directed=T,vertices=vertexData)
# function to remove isolates
delete.isolates <- function(graph, mode = 'all') {
require(igraph)
isolates <- which(degree(graph, mode = mode) == 0)
delete.vertices(graph, isolates)
}
fdi_netNoIsolates <- delete.isolates(fdi_net)
coordinates <- layout_with_fr(fdi_netNoIsolates,weights=fdi_net$Value)
library(colorRamps)
colorSequence <- blue2red(length(-10:10))
vertex.colors <- colorSequence[get.vertex.attribute(fdi_netNoIsolates,"originPolity")+11]
fileName <- paste("./networkPlots/fdiNet",yr,sep="")
pdf(file=fileName,height=4,width=4)
plot(fdi_netNoIsolates, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1), vertex.color=vertex.colors, vertex.size=3,vertex.label=NA,layout=coordinates)
dev.off()
}
years <- unique(fdi$Year)
for(yr in years){
# plot 2002
fdi02 <- subset(fdi, fdi$Year==yr)
# Create an edgelist and vertex-level dataset
uniqueStates <- sort(unique(fdi02$Origin))
originPolity <- fdi02$Origin.polity[match(uniqueStates,fdi02$Origin)]
vertexData <- data.frame(uniqueStates,originPolity)
# re-arrange sender-receiver
fdi02[,c(1,2)] <- fdi02[,c(2,1)]
# remove non-edges
fdi02 <- fdi02[-which(fdi02$Value <= 0),]
fdi_net <- graph_from_data_frame(d=fdi02,directed=T,vertices=vertexData)
# function to remove isolates
delete.isolates <- function(graph, mode = 'all') {
require(igraph)
isolates <- which(degree(graph, mode = mode) == 0)
delete.vertices(graph, isolates)
}
fdi_netNoIsolates <- delete.isolates(fdi_net)
coordinates <- layout_with_fr(fdi_netNoIsolates,weights=fdi_net$Value)
library(colorRamps)
colorSequence <- blue2red(length(-10:10))
vertex.colors <- colorSequence[get.vertex.attribute(fdi_netNoIsolates,"originPolity")+11]
fileName <- paste("./networkPlots/fdiNet",yr,".pdf",sep="")
pdf(file=fileName,height=6,width=6)
plot(fdi_netNoIsolates, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1), vertex.color=vertex.colors, vertex.size=3,vertex.label=NA,layout=coordinates)
dev.off()
}
years <- unique(fdi$Year)
set.seed(5)
for(yr in years){
# plot 2002
fdi02 <- subset(fdi, fdi$Year==yr)
# Create an edgelist and vertex-level dataset
uniqueStates <- sort(unique(fdi02$Origin))
originPolity <- fdi02$Origin.polity[match(uniqueStates,fdi02$Origin)]
vertexData <- data.frame(uniqueStates,originPolity)
# re-arrange sender-receiver
fdi02[,c(1,2)] <- fdi02[,c(2,1)]
# remove non-edges
fdi02 <- fdi02[-which(fdi02$Value <= 0),]
fdi_net <- graph_from_data_frame(d=fdi02,directed=T,vertices=vertexData)
# function to remove isolates
delete.isolates <- function(graph, mode = 'all') {
require(igraph)
isolates <- which(degree(graph, mode = mode) == 0)
delete.vertices(graph, isolates)
}
fdi_netNoIsolates <- delete.isolates(fdi_net)
coordinates <- layout_with_fr(fdi_netNoIsolates,weights=fdi_net$Value)
library(colorRamps)
colorSequence <- blue2red(length(-10:10))
vertex.colors <- colorSequence[get.vertex.attribute(fdi_netNoIsolates,"originPolity")+11]
fileName <- paste("./networkPlots/fdiNet",yr,".pdf",sep="")
pdf(file=fileName,height=6,width=6)
plot(fdi_netNoIsolates, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1), vertex.color=vertex.colors, vertex.size=4,vertex.label=NA,layout=coordinates)
dev.off()
}
years <- unique(fdi$Year)
set.seed(5)
for(yr in years){
# plot 2002
fdi02 <- subset(fdi, fdi$Year==yr)
# Create an edgelist and vertex-level dataset
uniqueStates <- sort(unique(fdi02$Origin))
originPolity <- fdi02$Origin.polity[match(uniqueStates,fdi02$Origin)]
vertexData <- data.frame(uniqueStates,originPolity)
# re-arrange sender-receiver
fdi02[,c(1,2)] <- fdi02[,c(2,1)]
# remove non-edges
fdi02 <- fdi02[-which(fdi02$Value <= 0),]
fdi_net <- graph_from_data_frame(d=fdi02,directed=T,vertices=vertexData)
# function to remove isolates
delete.isolates <- function(graph, mode = 'all') {
require(igraph)
isolates <- which(degree(graph, mode = mode) == 0)
delete.vertices(graph, isolates)
}
fdi_netNoIsolates <- delete.isolates(fdi_net)
coordinates <- layout_with_fr(fdi_netNoIsolates,weights=fdi_net$Value)
library(colorRamps)
colorSequence <- blue2red(length(-10:10))
vertex.colors <- colorSequence[get.vertex.attribute(fdi_netNoIsolates,"originPolity")+11]
fileName <- paste("./networkPlots/fdiNet",yr,".pdf",sep="")
pdf(file=fileName,height=6,width=6)
plot(fdi_netNoIsolates, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1), vertex.color=vertex.colors, vertex.size=4,vertex.label=NA,layout=coordinates)
dev.off()
}
#=============================================================#
# John Schoeneman
# Work Done For: FDI Network Analysis RA-IGERT
# Date: Fall 2016
# Work Done: Perform ERGM Count analysis
# Machine: MacPro OSX Yosemite
#=============================================================#
# clear workspace
rm(list=ls())
set.seed(19)
# libraries
library(network)
library(igraph)
#load in data
fdi <- read.csv("sub_stock.csv", stringsAsFactors=FALSE)        #FDI
fdi <- fdi[,-1]
# Important to note that the igraph function below is expecting an edgelist, which means it will record an edge between every pair of vertices if given a dyadic dataset
years <- unique(fdi$Year)
set.seed(5)
for(yr in years){
# plot 2002
fdi02 <- subset(fdi, fdi$Year==yr)
# Create an edgelist and vertex-level dataset
uniqueStates <- sort(unique(fdi02$Origin))
originPolity <- fdi02$Origin.polity[match(uniqueStates,fdi02$Origin)]
vertexData <- data.frame(uniqueStates,originPolity)
# re-arrange sender-receiver
fdi02[,c(1,2)] <- fdi02[,c(2,1)]
# remove non-edges
fdi02 <- fdi02[-which(fdi02$Value <= 0),]
fdi_net <- graph_from_data_frame(d=fdi02,directed=T,vertices=vertexData)
# function to remove isolates
delete.isolates <- function(graph, mode = 'all') {
require(igraph)
isolates <- which(degree(graph, mode = mode) == 0)
delete.vertices(graph, isolates)
}
fdi_netNoIsolates <- delete.isolates(fdi_net)
coordinates <- layout_with_fr(fdi_netNoIsolates,weights=get.edge.attribute(fdi_net,"Value"))
library(colorRamps)
colorSequence <- blue2red(length(-10:10))
vertex.colors <- colorSequence[get.vertex.attribute(fdi_netNoIsolates,"originPolity")+11]
fileName <- paste("./networkPlots/fdiNet",yr,".pdf",sep="")
pdf(file=fileName,height=6,width=6)
plot(fdi_netNoIsolates, edge.arrow.size=.25, edge.color=rgb(.2,.2,.2,.1), vertex.color=vertex.colors, vertex.size=4,vertex.label=NA,layout=coordinates)
dev.off()
}
# Hadleigh says this network looks like a chicken stuck in a spider web
library(twitteR)
?getCurRateLimitInfo
getCurRateLimitInfo()
# Required libraries for the scraping
# install.packages("twitteR")
library(twitteR)
# install.packages("ROAuth")
library(ROAuth)
# install.packages("httr")
library(httr)
# Codes required to scrape twitter from R
# Must have a twitter account to do this
# Need to create a generic "application" on twitter
# do so at https://apps.twitter.com
api_key <- 	"KEuTxGdTRCzO4K2xAYiqvmXnZ"
api_secret <- "sQVnHGrk9ueITxGPxKhBnDhCiY8SNb3hea8rZPFPfLT93Poq66"
access_token <- "628967454-RPTNraIhPiR9i7Zh2QkBTe2os4LNswcEiDxgfpf8"
access_token_secret <- "E6DL60fLMOcNqZqNlrMO5txuF1aGxF9PvuNBJbah9DyNj"
# open the data pipleline from twitter
setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)
getCurRateLimitInfo()
?Sys.Sleep
Sys.sleep()
?Sys.sleep
?userTimeline
?userTimeline
ut <- userTimeline('dzdanielzahn', n=100)
ut
length(ut)
library(ergm)
# Get file names for ERGM results
modelFiles <- dir("./Code/fdi_models")
# Matrix to store results
BICMat <- matrix(0,length(modelFiles)/2,2)
# Row labels for fit matrix
rowLabels <- sort(unique(substr(modelFiles,7,8)))
rownames(BICMat) <- rowLabels
colnames(BICMat) <- c("Independent","Network")
i=1
# Create environment in which to load results
fiti <- new.env()
# load the fit in the ith model file
load(paste("./Code/fdi_models/",modelFiles[i],sep=""),envir=fiti)
getwd()
setwd("/Users/bbd5087/Box Sync/Box/Research/FDI_IGERT_H/")
# Create environment in which to load results
fiti <- new.env()
# load the fit in the ith model file
load(paste("./Code/fdi_models/",modelFiles[i],sep=""),envir=fiti)
# Get file names for ERGM results
modelFiles <- dir("./Code/fdi_models")
# Matrix to store results
BICMat <- matrix(0,length(modelFiles)/2,2)
# Row labels for fit matrix
rowLabels <- sort(unique(substr(modelFiles,7,8)))
rownames(BICMat) <- rowLabels
colnames(BICMat) <- c("Independent","Network")
# Loop
getwd()
# Create environment in which to load results
fiti <- new.env()
# load the fit in the ith model file
load(paste("./Code/fdi_models/",modelFiles[i],sep=""),envir=fiti)
model <- fiti[[ls(fiti)]]
summary(model)
#=============================================================#
# John Schoeneman
# Work Done For: FDI Network Analysis RA-IGERT
# Date: Fall 2016
# Work Done: Perform ERGM Count analysis
# Machine: MacPro OSX Yosemite
#=============================================================#
# clear workspace
rm(list=ls())
set.seed(19)
# libraries
library(network)
library(igraph)
#load in data
fdi <- read.csv("sub_stock.csv", stringsAsFactors=FALSE)        #FDI
fdi <- fdi[,-1]
# Important to note that the igraph function below is expecting an edgelist, which means it will record an edge between every pair of vertices if given a dyadic dataset
years <- unique(fdi$Year)
set.seed(5)
#=============================================================#
# John Schoeneman
# Work Done For: FDI Network Analysis RA-IGERT
# Date: Fall 2016
# Work Done: Perform ERGM Count analysis
# Machine: MacPro OSX Yosemite
#=============================================================#
set.seed(19)
# libraries
library(network)
library(igraph)
#load in data
fdi <- read.csv("./Code/sub_stock.csv", stringsAsFactors=FALSE)        #FDI
fdi <- fdi[,-1]
library(ergm)
# Get file names for ERGM results
modelFiles <- dir("./Code/fdi_models")
# Matrix to store results
BICMat <- matrix(0,length(modelFiles)/2,2)
# Row labels for fit matrix
rowLabels <- sort(unique(substr(modelFiles,7,8)))
rownames(BICMat) <- rowLabels
colnames(BICMat) <- c("Independent","Network")
# Create environment in which to load results
fiti <- new.env()
# load the fit in the ith model file
load(paste("./Code/fdi_models/",modelFiles[i],sep=""),envir=fiti)
# Extract the year from t
i=1
# Create environment in which to load results
fiti <- new.env()
# load the fit in the ith model file
load(paste("./Code/fdi_models/",modelFiles[i],sep=""),envir=fiti)
# Extract the year from t
yr=2002
# plot 2002
fdi02 <- subset(fdi, fdi$Year==yr)
# Create an edgelist and vertex-level dataset
uniqueStates <- sort(unique(fdi02$Origin))
originPolity <- fdi02$Origin.polity[match(uniqueStates,fdi02$Origin)]
vertexData <- data.frame(uniqueStates,originPolity)
# re-arrange sender-receiver
fdi02[,c(1,2)] <- fdi02[,c(2,1)]
# remove non-edges
fdi02 <- fdi02[-which(fdi02$Value <= 0),]
fdi_net <- graph_from_data_frame(d=fdi02,directed=T,vertices=vertexData)
model <- fiti[[ls(fiti)]]
summary(model)
model
2*choose(150,2)
189000/(length(2002:2012))
